# Define the name of the GitHub Actions workflow
name: Deploy Pipeline

# Trigger the workflow on push events to the main branch
on:
  push:
    branches: [main]

# Set environment variables for AWS credentials and region
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key ID from GitHub secrets
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Access Key from GitHub secrets
  AWS_REGION: us-east-1 # AWS region to deploy resources in
  TERRAFORM_ACTION: destroy # Set default Terraform action to 'apply'. Change it as needed.
  GITHUB_USERNAME: jslearner-app
  REPOSITORY_NAME: rentzone-application-code-cicd
  WEB_FILE_ZIP: rentzone.zip
  WEB_FILE_UNZIP: rentzone
  FLYWAY_VERSION: 9.8.1

jobs:
  # Job to configure AWS credentials
  configure_aws_credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # Use AWS credentials action
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }} # Provide AWS Access Key ID
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }} # Provide AWS Secret Access Key
          aws-region: ${{ env.AWS_REGION }} # Provide AWS region

  # Job to build AWS infrastructure using Terraform
  deploy_aws_infrastructure:
    name: Build AWS infrastructure
    needs: configure_aws_credentials # Ensure this job runs after AWS credentials are configured
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checkout the repository to the runner

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2 # Set up Terraform CLI
        with:
          terraform_version: 1.1.7 # Specify the Terraform version to use

      - name: Run Terraform initialize
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: terraform init # Initialize Terraform configuration

      - name: Run Terraform apply/destroy
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve # Apply or destroy Terraform configuration based on the action

      # Steps to retrieve and set Terraform outputs as environment variables
      - name: Get Terraform output image name
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          IMAGE_NAME_VALUE=$(terraform output -raw image_name | grep -Eo "^[^:]+" | tail -n 1) # Get the 'image_name' output from Terraform
          echo "IMAGE_NAME=$IMAGE_NAME_VALUE" >> $GITHUB_ENV # Set 'IMAGE_NAME' as an environment variable
      - name: Get Terraform output domain name
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          DOMAIN_NAME_VALUE=$(terraform output -raw domain_name | grep -Eo "^[^:]+" | tail -n 1) # Get the 'domain_name' output from Terraform
          echo "DOMAIN_NAME=$DOMAIN_NAME_VALUE" >> $GITHUB_ENV # Set 'DOMAIN_NAME' as an environment variable
      - name: Get Terraform output RDS endpoint
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          RDS_ENDPOINT_VALUE=$(terraform output -raw rds_endpoint | grep -Eo "^[^:]+" | tail -n 1) # Get the 'rds_endpoint' output from Terraform
          echo "RDS_ENDPOINT=$RDS_ENDPOINT_VALUE" >> $GITHUB_ENV # Set 'RDS_ENDPOINT' as an environment variable
      - name: Get Terraform output image tag
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          IMAGE_TAG_VALUE=$(terraform output -raw image_tag | grep -Eo "^[^:]+" | tail -n 1) # Get the 'image_tag' output from Terraform
          echo "IMAGE_TAG=$IMAGE_TAG_VALUE" >> $GITHUB_ENV # Set 'IMAGE_TAG' as an environment variable
      - name: Get Terraform output private data subnet az1 id
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          PRIVATE_DATA_SUBNET_AZ1_ID_VALUE=$(terraform output -raw private_data_subnet_az1_id | grep -Eo "^[^:]+" | tail -n 1) # Get the 'private_data_subnet_az1_id' output from Terraform
          echo "PRIVATE_DATA_SUBNET_AZ1_ID=$PRIVATE_DATA_SUBNET_AZ1_ID_VALUE" >> $GITHUB_ENV # Set 'PRIVATE_DATA_SUBNET_AZ1_ID' as an environment variable
      - name: Get Terraform output runner security group id
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          RUNNER_SECURITY_GROUP_ID_VALUE=$(terraform output -raw runner_security_group_id | grep -Eo "^[^:]+" | tail -n 1) # Get the 'runner_security_group_id' output from Terraform
          echo "RUNNER_SECURITY_GROUP_ID=$RUNNER_SECURITY_GROUP_ID_VALUE" >> $GITHUB_ENV # Set 'RUNNER_SECURITY_GROUP_ID' as an environment variable
      - name: Get Terraform output task definition name
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          TASK_DEFINITION_NAME_VALUE=$(terraform output -raw task_definition_name | grep -Eo "^[^:]+" | tail -n 1) # Get the 'task_definition_name' output from Terraform
          echo "TASK_DEFINITION_NAME=$TASK_DEFINITION_NAME_VALUE" >> $GITHUB_ENV # Set 'TASK_DEFINITION_NAME' as an environment variable
      - name: Get Terraform output ecs cluster name
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          ECS_CLUSTER_NAME_VALUE=$(terraform output -raw ecs_cluster_name | grep -Eo "^[^:]+" | tail -n 1) # Get the 'ecs_cluster_name' output from Terraform
          echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME_VALUE" >> $GITHUB_ENV # Set 'ECS_CLUSTER_NAME' as an environment variable
      - name: Get Terraform output ecs service name
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          ECS_SERVICE_NAME_VALUE=$(terraform output -raw ecs_service_name | grep -Eo "^[^:]+" | tail -n 1) # Get the 'ecs_service_name' output from Terraform
          echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME_VALUE" >> $GITHUB_ENV # Set 'ECS_SERVICE_NAME' as an environment variable
      - name: Get Terraform output environment file name
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          ENVIRONMENT_FILE_NAME_VALUE=$(terraform output -raw environment_file_name | grep -Eo "^[^:]+" | tail -n 1) # Get the 'environment_file_name' output from Terraform
          echo "ENVIRONMENT_FILE_NAME=$ENVIRONMENT_FILE_NAME_VALUE" >> $GITHUB_ENV # Set 'ENVIRONMENT_FILE_NAME' as an environment variable
      - name: Get Terraform output env file bucket name
        if: ${{ env.TERRAFORM_ACTION == 'apply' }} # Only run if the action is 'apply'
        working-directory: ./iac # Specify the directory containing Terraform configuration
        run: |
          ENV_FILE_BUCKET_NAME_VALUE=$(terraform output -raw env_file_bucket_name | grep -Eo "^[^:]+" | tail -n 1) # Get the 'env_file_bucket_name' output from Terraform
          echo "ENV_FILE_BUCKET_NAME=$ENV_FILE_BUCKET_NAME_VALUE" >> $GITHUB_ENV # Set 'ENV_FILE_BUCKET_NAME' as an environment variable
      - name: Print GITHUB_ENV contents
        run: cat $GITHUB_ENV # Print the contents of the GITHUB_ENV file to verify the environment variables

    # Set the outputs of this job to be used by other jobs
    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name: ${{ env.IMAGE_NAME }}
      domain_name: ${{ env.DOMAIN_NAME }}
      rds_endpoint: ${{ env.RDS_ENDPOINT }}
      image_tag: ${{ env.IMAGE_TAG }}
      private_data_subnet_az1_id: ${{ env.PRIVATE_DATA_SUBNET_AZ1_ID }}
      runner_security_group_id: ${{ env.RUNNER_SECURITY_GROUP_ID }}
      task_definition_name: ${{ env.TASK_DEFINITION_NAME }}
      ecs_cluster_name: ${{ env.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ env.ECS_SERVICE_NAME }}
      environment_file_name: ${{ env.ENVIRONMENT_FILE_NAME }}
      env_file_bucket_name: ${{ env.ENV_FILE_BUCKET_NAME }}

  # Job to create an ECR repository
  create_ecr_repository:
    name: Create ECR repository
    needs: 
      - configure_aws_credentials # Ensure this job runs after AWS credentials are configured
      - deploy_aws_infrastructure # Ensure this job runs after the infrastructure is deployed
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'destroy' # Only run if the Terraform action is not 'destroy'
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checkout the repository to the runner

      - name: Check if ECR repository exists
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }} # Use the 'image_name' output from the previous job
        run: |
          result=$(aws ecr describe-repositories --repository-names "${{ env.IMAGE_NAME }}" | jq -r '.repositories[0].repositoryName') # Check if the ECR repository exists
          echo "repo_name=$result" >> $GITHUB_ENV # Set 'repo_name' as an environment variable
        continue-on-error: true # Continue even if the command fails

      - name: Create ECR repository
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }} # Use the 'image_name' output from the previous job
        if: env.repo_name != env.IMAGE_NAME # Only create the repository if it doesn't already exist
        run: |
          aws ecr create-repository --repository-name ${{ env.IMAGE_NAME }} # Create the ECR repository
 # Start self-hosted EC2 runner job
  start_runner:
    name: Start self-hosted EC2 runner
    needs: 
      - configure_aws_credentials # Ensure this job runs after AWS credentials are configured
      - deploy_aws_infrastructure # Ensure this job runs after the infrastructure is deployed
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'destroy' # Only run if the Terraform action is not 'destroy'
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
  
    steps:
      - name: Check for running EC2 runner
        run: |
          # Describe instances with the specified tags and state to check if any runner is already running
          instances=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ec2-github-runner" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].InstanceId' --output text)
  
          # If there are running instances, set the runner-running environment variable to true, otherwise false
          if [ -n "$instances" ]; then
            echo "runner-running=true" >> $GITHUB_ENV
          else
            echo "runner-running=false" >> $GITHUB_ENV
          fi
  
      - name: Start EC2 runner
        if: env.runner-running != 'true' # Only start a new runner if there is no existing running runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2 # Use the ec2-github-runner action
        with:
          mode: start # Start the EC2 instance
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # Use a personal access token from secrets
          ec2-image-id: ami-09551da0c05c4f643 # Specify the AMI ID for the EC2 instance
          ec2-instance-type: t2.micro # Specify the instance type
          subnet-id: ${{ needs.deploy_aws_infrastructure.outputs.private_data_subnet_az1_id }} # Use the subnet ID output from the deploy job
          security-group-id: ${{ needs.deploy_aws_infrastructure.outputs.runner_security_group_id }} # Use the security group ID output from the deploy job
          aws-resource-tags: > 
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"} 
            ]
  
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }} # Output the label of the runner
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }} # Output the instance ID of the EC2 runner

  # Build and push Docker image to ECR
  build_and_push_image:
    name: Build and push Docker image to ECR
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - create_ecr_repository
      - start_runner
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'destroy'
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        env:
          DOMAIN_NAME: ${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
          RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
          docker build \
          --build-arg PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} \
          --build-arg GITHUB_USERNAME=${{ env.GITHUB_USERNAME }} \
          --build-arg REPOSITORY_NAME=${{ env.REPOSITORY_NAME }} \
          --build-arg WEB_FILE_ZIP=${{ env.WEB_FILE_ZIP }} \
          --build-arg WEB_FILE_UNZIP=${{ env.WEB_FILE_UNZIP }} \
          --build-arg DOMAIN_NAME=${{ env.DOMAIN_NAME }} \
          --build-arg RDS_ENDPOINT=${{ env.RDS_ENDPOINT }} \
          --build-arg RDS_DB_NAME=${{ secrets.RDS_DB_NAME }} \
          --build-arg RDS_DB_USERNAME=${{ secrets.RDS_DB_USERNAME }} \
          --build-arg RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }} \
          -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
      - name: Retag Docker image
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
        run: |
          docker tag ${{ env.IMAGE_NAME }} ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Push Docker Image to Amazon ECR
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}
  # Create environment file and export to S3 
  export_env_variables:
    name: Create environment file and export to S3 
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - start_runner
      - build_and_push_image
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Export environment variable values to file
        env:
          DOMAIN_NAME: ${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
          RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
          ENVIRONMENT_FILE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }}
        run: |
          echo "PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}" > ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "GITHUB_USERNAME=${{ env.GITHUB_USERNAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "REPOSITORY_NAME=${{ env.REPOSITORY_NAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "WEB_FILE_ZIP=${{ env.WEB_FILE_ZIP }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "WEB_FILE_UNZIP=${{ env.WEB_FILE_UNZIP }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "DOMAIN_NAME=${{ env.DOMAIN_NAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "RDS_DB_USERNAME=${{ secrets.RDS_DB_USERNAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
          echo "RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
      - name: Upload environment file to S3
        env:
          ENVIRONMENT_FILE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }}
          ENV_FILE_BUCKET_NAME: ${{ needs.deploy_aws_infrastructure.outputs.env_file_bucket_name }}
        run: aws s3 cp ${{ env.ENVIRONMENT_FILE_NAME }} s3://${{ env.ENV_FILE_BUCKET_NAME }}/${{ env.ENVIRONMENT_FILE_NAME }}



  # Migrate data into RDS database with Flyway
  migrate_data:
    name: Migrate data into RDS database with Flyway
    needs:
      - deploy_aws_infrastructure
      - start_runner
      - build_and_push_image
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'destroy'
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Flyway
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${{ env.FLYWAY_VERSION }}/flyway-commandline-${{ env.FLYWAY_VERSION }}-linux-x64.tar.gz | tar xvz && sudo ln -s `pwd`/flyway-${{ env.FLYWAY_VERSION }}/flyway /usr/local/bin 
      - name: Remove the placeholder (sql) directory
        run: |
          rm -rf flyway-${{ env.FLYWAY_VERSION }}/sql/
      - name: Copy the sql folder into the Flyway sub-directory
        run: |
          cp -r sql flyway-${{ env.FLYWAY_VERSION }}/
      - name: Run Flyway migrate command
        env:
          FLYWAY_URL: jdbc:mysql://${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}:3306/${{ secrets.RDS_DB_NAME }}
          FLYWAY_USER: ${{ secrets.RDS_DB_USERNAME }}
          FLYWAY_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
          FLYWAY_LOCATION: filesystem:sql
        working-directory: ./flyway-${{ env.FLYWAY_VERSION }}
        run: |
          flyway -url=${{ env.FLYWAY_URL }} \
            -user=${{ env.FLYWAY_USER }} \
            -password=${{ env.FLYWAY_PASSWORD }} \
            -locations=${{ env.FLYWAY_LOCATION }} migrate
  # Stop the self-hosted EC2 runner
  stop_runner:
    name: Stop self-hosted EC2 runner
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - start_runner
      - build_and_push_image
      - export_env_variables
      - migrate_data
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'destroy' && always() 
    runs-on: ubuntu-latest
    steps:
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start_runner.outputs.label }}
          ec2-instance-id: ${{ needs.start_runner.outputs.ec2-instance-id }}


  # Create new task definition revision
  create_td_revision:
    name: Create new task definition revision
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure 
      - create_ecr_repository
      - start_runner
      - build_and_push_image
      - export_env_variables
      - migrate_data
      - stop_runner
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Create new task definition revision
        env:
          ECS_FAMILY: ${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}
          ECS_IMAGE: ${{ secrets.ECR_REGISTRY }}/${{ needs.deploy_aws_infrastructure.outputs.image_name }}:${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
        run: |
          # Get existing task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_FAMILY }})
          # update the existing task definition by performing the following actions:
          # 1. Update the `containerDefinitions[0].image` to the new image we want to deploy
          # 2. Remove fields from the task definition that are not compatibile with `register-task-definition` --cli-input-json
          NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq --arg IMAGE "${{ env.ECS_IMAGE }}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          # Register the new task definition and capture the output as JSON
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")
          # Grab the new revision from the output
          NEW_TD_REVISION=$(echo "$NEW_TASK_INFO" | jq '.taskDefinition.revision')
          # Set the new revision as an environment variable
          echo "NEW_TD_REVISION=$NEW_TD_REVISION" >> $GITHUB_ENV
    outputs:
      new_td_revision: ${{ env.NEW_TD_REVISION }}



  # Restart ECS Fargate service
  restart_ecs_service:
    name: Restart ECS Fargate service
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure 
      - create_ecr_repository
      - start_runner
      - build_and_push_image
      - export_env_variables
      - migrate_data
      - stop_runner
      - create_td_revision
    if: needs.deploy_aws_infrastructure.outputs.terraform_action == 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Update ECS Service
        env:
          ECS_CLUSTER_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}
          TD_NAME: ${{ needs.deploy_aws_infrastructure.outputs.task_definition_name }}
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER_NAME }} --service ${{ env.ECS_SERVICE_NAME }} --task-definition ${{ env.TD_NAME }}:${{ needs.create_td_revision.outputs.new_td_revision }} --force-new-deployment
      - name: Wait for ECS service to become stable
        env:
          ECS_CLUSTER_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_cluster_name }}
          ECS_SERVICE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.ecs_service_name }}
        run: |
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME }}
